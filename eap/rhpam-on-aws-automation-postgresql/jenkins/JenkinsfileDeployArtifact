//##pipeline for dev environment

@Library('shared-jenkins-library') _
node('awsjdk11') {
//        def awsRegion = "us-east-1"
//        def asgName = "ks-eip-asg"
        def launchConfigurationBaseName = "ls-ks-19-Jan-2"
        def kieServerAddressPlusPort
        def bcAddressPlusPort
        def imageId
        def instanceType
        def securityGroup
        def kieServersInstances
        def bcServersInstances
        def kieServersInstancesController
        def kieServersInstancesControllerJSon
        String keyName
        def groupId = "${params.GROUPID}"
        def artifact = "${params.ARTIFACTID}"
        def version = "${params.ARTIFACT_VERSION}"
        def awsRegion = "${params.AWS_REGION}"
        def asgName = "${params.ASG_NAME}"
        def containerId = artifact + "_" + version
        String lastVersion = ""
        echo "Start of pipeline!! - going to deploy artifact ${groupId}-${artifact}-${version} on all managed KIE servers instances through Business central controller"
        stage('Authentication To AWS') {

//                withCredentials([usernamePassword(credentialsId: 'AWS_CREDENTIALS', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
//                     authenticateAWS (USER, PASSWORD, awsRegion)
            configFileProvider(
                    [configFile(fileId: 'aws-credentials-file', variable: 'AWS_FILE')]) {
                echo "file location : ${AWS_FILE}"
                def result = sh(script : "cat ${AWS_FILE}" ,returnStdout: true).trim()
//                echo "content are : ${result}"
                  def result2 = sh(script : "aws configure set region ${awsRegion} ; cp ${AWS_FILE} ~/.aws/credentials" ,returnStdout: true).trim()
//                echo "result2 = ${result2}"
            }

                 }
                 

        
        stage('Fetching instances by tags')
        {
            // getAwsInstancesByAppTagValue - call(String keyApplicationName,String appName)
            kieServersInstances = getAwsInstancesByAppTagValue("app","RHPAM-KS")
            bcServersInstances = getAwsInstancesByAppTagValue("app","RHPAM-BC")

            // sh( script :  'aws ec2 describe-tags --filters Name=resource-type,Values=instance Name=tag:app,Values=RHPAM-KS',returnStdout : true).trim()
            
           
            
        }


         stage('Retrieve Instance Details'){

                def jsonWithArray = readJSON text: kieServersInstances
                def instanceJson
             //go over json of instances, and return the first instance that is running
                jsonWithArray.Tags.any{instance->

                    def instanceId = instance.ResourceId
                    def instanceJsonString = getInstanceDetailsById(instanceId)
                    instanceJson = readJSON text: instanceJsonString
                    def instanceState = instanceJson.Reservations["Instances"][0].State.Name.toString()
                    if(instanceState.equalsIgnoreCase("running") || instanceState.equalsIgnoreCase("[running]"))
                    {
                        return true
                    }
                }

             //retrieve important information from the chosen running KIE Server
             imageId = instanceJson.Reservations["Instances"][0].ImageId
                instanceType = instanceJson.Reservations["Instances"][0].InstanceType
                securityGroup = instanceJson.Reservations["Instances"][0].SecurityGroups[0].GroupId
                kieServerAddressPlusPort = instanceJson.Reservations["Instances"][0].PublicIpAddress.toString()
                kieServerAddressPlusPort = stripStartAndEnd(kieServerAddressPlusPort) + ":8080"
                keyName = instanceJson.Reservations["Instances"][0].KeyName



         }

        stage('Retrieve all Managed Kie-servers')
                {
                    //get public ip address of Business central
                  def bcServersInstancesJson =  readJSON text: bcServersInstances
                  def bcInstanceId
                    if(bcServersInstancesJson.Tags.isEmpty())
                    {
                      throw new Exception("Can't find Business central on AWS, pipeline is aborted.")
                    }
                    else {
                        bcInstanceId = bcServersInstancesJson.Tags[0].ResourceId
                        def bcInstanceJsonString = getInstanceDetailsById(bcInstanceId)
                        bcInstanceJson = readJSON text: bcInstanceJsonString
                        bcAddressPlusPort = bcInstanceJson.Reservations["Instances"][0].PublicIpAddress.toString()
                        bcAddressPlusPort = stripStartAndEnd(bcAddressPlusPort) + ":8080"
                        withCredentials([usernamePassword(credentialsId: 'BC_CREDENTIALS', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
//                            def call(String server,String userName,String password)
                            kieServersInstancesController = getAllKieServersInJson(bcAddressPlusPort, USER, PASSWORD)
                            kieServersInstancesControllerJSon = readJSON text : kieServersInstancesController

                        }
                    }
                }

        stage('Retrieve Last Artifact version '){
            withCredentials([usernamePassword(credentialsId: 'BC_CREDENTIALS', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
//                def call(String server,String userName,String password, String groupId , String artifactId, String version,String kieServerId )
                def kieServerId = kieServersInstancesControllerJSon["server-template"][0]["server-id"]
//                def call(String server,String userName,String password, String groupId , String artifactId, String version,String kieServerId )
                lastVersion = getArtifactLatestVersionFromKieServerController(bcAddressPlusPort,USER,PASSWORD,groupId,artifact,version,kieServerId)
                lastVersion = lastVersion.toString();
                echo "last version is ${lastVersion}"
            }

        }
        stage('Deploy artifact to KIeServers') {

                kieServersInstancesControllerJSon["server-template"].each{ json ->
                def kieServerId = json["server-id"]
                echo "Deploying to kieServerId: ${kieServerId} Using business central controller, Business-central Ip Address and port:${bcAddressPlusPort} "
                withCredentials([usernamePassword(credentialsId: 'KS_CREDENTIALS', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
//                      def call(String server,String userName,String password,String containerId, String groupId , String artifactId, String version,String kieServerId )
                      deployToKieServerArtifactController(bcAddressPlusPort, USER, PASSWORD, containerId, groupId, artifact, version,kieServerId)

                    }

           }
            
        }
        stage('Undeploy last version of artifact') {
            echo "current version is ${version}"
            echo "previous version is ${lastVersion}"
            if(!lastVersion.trim().equals("") && !lastVersion.trim().equalsIgnoreCase(version.trim())) {

                    kieServersInstancesControllerJSon["server-template"].each{ json ->
                    def kieServerId = json["server-id"]
                    echo "Undeploying from kieServerId: ${kieServerId} , Business central IP Address ${bcAddressPlusPort} "
                    withCredentials([usernamePassword(credentialsId: 'BC_CREDENTIALS', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                         //undeployArtifactFromKieServer - def call(String server,String userName,String password,String containerId)
                         def oldContainerId = artifact + "_" + lastVersion
//                        def call(String server,String userName,String password,String containerId,String kieServerId )
                        undeployArtifactFromKieServerController(bcAddressPlusPort, USER, PASSWORD, oldContainerId,kieServerId)

                        }

                }
            }

            else
            {
                echo "Artifact has no previous version or it's the same version, there is nothing to delete"
            }

        }

        stage('Update ASG with updated GAV userData')
                {
                    //First, need to build GAV property into a file in the build workspace
                    String gavPropertyFileLocationForUserData = createLatestArtifactGavInWorkspace(groupId,artifact,version)

                    //Secondly, needs to retrieve Auto scaling group name (ASG name) according to tags
//                    def call(String tagKey,String tagValue)
//                    String asgName = getAwsAsgNameByTagAndValue("asgType","kieServers")
//                    String asgName = getAwsAsgNameByTagAndValue("environment","test-ks")

                    //Thirdly, needs to create launch configuration name, need to be unique, so it will be combined from launchConfigurationBaseName +jenkins build number concatenated with dash
                    //if will be problematic in the future(if the jenkins builds number will start over from the start - 1), then can add GIT_COMMIT env variable so it'll be 100% unique.
//                    def launchConfigurationName = "${groupId}-${artifact}-${version}-${currentBuild.number}"
                    def launchConfigurationName = "${launchConfigurationBaseName}-${currentBuild.number}"

                    //Fourthly , needs to create a new launch configuration That will contain this GAV property in user-data property
//                    def call(String launchConfigName,String imageId,String instanceType,String pathToFile,String securityGroup,String awsRegion)
                    String imageIdStripped = stripStartAndEnd(imageId.toString())
                    String instanceTypeStripped = stripStartAndEnd(instanceType.toString())
                    String securityGroupStripped = stripStartAndEnd(securityGroup.toString())
                    String keyNameStripped = stripStartAndEnd(keyName.toString())
                    createLaunchConfigurationAWS(launchConfigurationName,imageIdStripped,instanceTypeStripped,gavPropertyFileLocationForUserData,securityGroupStripped,awsRegion,keyNameStripped)

                    //Lastly, needs to update Auto scaling Group with this new version of launch configuration.
//                    def call(String asgName,String launchConfigName)
                    updateAutoScalingGroup(asgName,launchConfigurationName)

                }

        stage('Clean Workspace')
          {
              cleanWs()
          }
}

private String stripStartAndEnd(String text) {
    return text.substring(1, text.length() - 1)
}

