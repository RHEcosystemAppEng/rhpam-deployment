//##pipeline for dev environment

@Library('shared-jenkins-library@demo') _
node {
        def awsRegion = "us-east-1"
        def asgName = "ks-eip-asg"
        def launchConfigurationBaseName = "ks-eip-launch-configuration"
        def kieServerAddressPlusPort
        def imageId
        def instanceType
        def securityGroup
        def kieServersInstances
        def groupId = "${params.GROUPID}"
        def artifact = "${params.ARTIFACTID}"
        def version = "${params.ARTIFACT_VERSION}"
        def containerId = artifact + "_" + version
        String lastVersion = ""
        
        stage('Authentication To AWS') {

                withCredentials([usernamePassword(credentialsId: 'AWS_CREDENTIALS', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                     authenticateAWS (USER, PASSWORD, awsRegion)

                 }
                 
        }
        
        stage('Fetching instances by tag')
        {
            // getAwsInstancesByAppTagValue - call(String keyApplicationName,String appName)
            kieServersInstances = getAwsInstancesByAppTagValue("app","RHPAM-KS")
            // sh( script :  'aws ec2 describe-tags --filters Name=resource-type,Values=instance Name=tag:app,Values=RHPAM-KS',returnStdout : true).trim()
            
           
            
        }


         stage('Retrieve Instance Details'){
                def jsonWithArray = readJSON text: kieServersInstances
                def instanceId = jsonWithArray.Tags[0].ResourceId
                def instanceJsonString = getInstanceDetailsById(instanceId)
                def instanceJson = readJSON text: instanceJsonString

                imageId = instanceJson.Reservations["Instances"][0].ImageId
                instanceType = instanceJson.Reservations["Instances"][0].InstanceType
                securityGroup = instanceJson.Reservations["Instances"][0].SecurityGroups[0].GroupId
                kieServerAddressPlusPort = instanceJson.Reservations["Instances"][0].PublicIpAddress.toString()
                kieServerAddressPlusPort = kieServerAddressPlusPort.substring(1,kieServerAddressPlusPort.length()-1) + ":8080"


         }

        stage('Retrieve Last Artifact version '){
            withCredentials([usernamePassword(credentialsId: 'KS_CREDENTIALS', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                //def call(String server,String userName,String password, String groupId , String artifactId, String version )
                lastVersion = getArtifactLatestVersionFromKieServer(kieServerAddressPlusPort,USER,PASSWORD,groupId,artifact,version)
                lastVersion = lastVersion.toString();
                echo "last version is ${lastVersion}"
            }

        }
        stage('Deploy artifact to KIeServers') {
            def jsonWithArray = readJSON text: kieServersInstances
            jsonWithArray.Tags.each{ json ->
                def instanceId = json.ResourceId
                // getInstanceDetailsById - call(String instanceId)
                def jsonInstance = getInstanceDetailsById(instanceId)
                def jsonS = readJSON text: jsonInstance
                
                def publicIpAddress = jsonS.Reservations["Instances"][0].PublicIpAddress.toString()
                
                echo "Deploying to instanceId: ${instanceId} , Ip Address ${publicIpAddress} "
                
                ipAddressStripped = publicIpAddress.substring(1,publicIpAddress.length()-1) + ":8080"
                
                withCredentials([usernamePassword(credentialsId: 'KS_CREDENTIALS', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                    //deployToKieServerArtifact - def call(String server,String userName,String password,String containerId, String groupId , String artifactId, String version )
                     deployToKieServerArtifact (ipAddressStripped,USER, PASSWORD, containerId ,groupId ,artifact,version)
                     
                }                
           }
            
        }
        stage('Undeploy last version of artifact') {
            echo "current version is ${version}"
            echo "previous version is ${lastVersion}"
            if(!lastVersion.trim().equals("") && !lastVersion.equals(version)) {
                def jsonWithArray = readJSON text: kieServersInstances
                jsonWithArray.Tags.each { json ->
                    def instanceId = json.ResourceId
                    // getInstanceDetailsById - call(String instanceId)
                    def jsonInstance = getInstanceDetailsById(instanceId)
                    def jsonS = readJSON text: jsonInstance

                    def publicIpAddress = jsonS.Reservations["Instances"][0].PublicIpAddress.toString()

                    echo "Undeploying from instanceId: ${instanceId} , Ip Address ${publicIpAddress} "

                    def ipAddressStripped = publicIpAddress.substring(1, publicIpAddress.length() - 1) + ":8080"

                    withCredentials([usernamePassword(credentialsId: 'KS_CREDENTIALS', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                        //undeployArtifactFromKieServer - def call(String server,String userName,String password,String containerId)
                        def oldContainerId = artifact + "_" + lastVersion
                        undeployArtifactFromKieServer(ipAddressStripped, USER, PASSWORD, oldContainerId)

                    }
                }
            }

            else
            {
                echo "Artifact has no previous version or it's the same version, there is nothing to delete"
            }

        }

        stage('Update ASG with updated GAV userData')
                {
                    //First, need to build GAV property into a file in the build workspace
                    String gavPropertyFileLocationForUserData = createLatestArtifactGavInWorkspace(groupId,artifact,version)

                    //Secondly, needs to retrieve Auto scaling group name (ASG name) according to tags
//                    def call(String tagKey,String tagValue)
//                    String asgName = getAwsAsgNameByTagAndValue("asgType","kieServers")
//                    String asgName = getAwsAsgNameByTagAndValue("environment","test-ks")

                    //Thirdly, needs to create launch configuration name, need to be unique, so it will be combined from launchConfigurationBaseName +jenkins build number concatenated with dash
                    //if will be problematic in the future(if the jenkins builds number will start over from the start - 1), then can add GIT_COMMIT env variable so it'll be 100% unique.
//                    def launchConfigurationName = "${groupId}-${artifact}-${version}-${currentBuild.number}"
                    def launchConfigurationName = "${launchConfigurationBaseName}-${currentBuild.number}"

                    //Fourthly , needs to create a new launch configuration That will contain this GAV property in user-data property
//                    def call(String launchConfigName,String imageId,String instanceType,String pathToFile,String securityGroup,String awsRegion)
                    String imageIdStripped = imageId.toString().substring(1,imageId.toString().length()-1)
                    String instanceTypeStripped = instanceType.toString().substring(1,instanceType.toString().length()-1)
                    String securityGroupStripped = securityGroup.toString().substring(1,securityGroup.toString().length()-1)
                    createLaunchConfigurationAWS(launchConfigurationName,imageIdStripped,instanceTypeStripped,gavPropertyFileLocationForUserData,securityGroupStripped,awsRegion)

                    //Lastly, needs to update Auto scaling Group with this new version of launch configuration.
//                    def call(String asgName,String launchConfigName)
                    updateAutoScalingGroup(asgName,launchConfigurationName)

                }
        stage('Clean Workspace')
          {
              cleanWs()
          }
}

